// .cursor

import fs from 'fs';
import path from 'path';

const DATA_DIR = './data';

export const files = fs
  .readdirSync(DATA_DIR)
  .filter(name => name.endsWith('_tree.json'))
  .map(name => `data/${name}`);

function listDirRecursive(basePath) {
  const result = {};

  const entries = fs.readdirSync(basePath, { withFileTypes: true });
  for (const entry of entries) {
    const fullPath = path.join(basePath, entry.name);
    if (entry.isDirectory()) {
      result[entry.name] = listDirRecursive(fullPath); // recurse
    } else {
      result[entry.name] = 'file';
    }
  }

  return result;
}

export default async function onChange({ socket }) {
  const treeFiles = fs
    .readdirSync(DATA_DIR)
    .filter(name => name.endsWith('_tree.json'));

  const snapshot = listDirRecursive(DATA_DIR);

  socket.send(JSON.stringify({
    type: 'cursor-file-structure',
    content: {
      detectedTreeFiles: treeFiles,
      fullDataDirectory: snapshot
    }
  }));
}
